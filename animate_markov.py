"""animate markov.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vKCfT3wTWUsOfhawuO-aQfKsGM-M3Sz7

# Markov Chain Simulator of stationary distribution

Built for CS113 LBA, Spring 2024.

# Building the universal function
"""

import cv2
import numpy as np
from google.colab.patches import cv2_imshow
from numpy.linalg import matrix_power
from IPython.display import clear_output
import time
def markov_animator(matrix, vector,states, steps=20, seconds_per_step = 1):


  # Reading an image in default mode
  Img = np.zeros((512, 512, 3), np.uint8)


  # Radius of circle
  radius = 50


  color = (255, 255, 255)

  # Line thickness of -1 px
  thickness = -2
  TEXT_FACE = cv2.FONT_HERSHEY_DUPLEX
  TEXT_SCALE = 0.7
  TEXT_THICKNESS = 1



  colors = (0,0,0)

  cor = [(200, 150) ,(200, 400), (100, 275),(320, 360), (320, 180)  ]
  cord_nums = [(170, 150) ,(170, 400), (70, 275),(290, 360), (290, 180)  ]

  text = states

  cord_names= [(150, 90) ,(150, 340), (50, 215), (270, 300), (270, 120)  ]

  color_names = (255,255,0)

  initial = vector

  n = steps


  for i in range(n+1):
      result = np.around(initial, decimals=3)

      for entry in range(len(initial)):
          cv2.circle(Img, cor[entry], radius, color, thickness)
          cv2.putText(Img, str(result[entry]), cord_nums[entry], TEXT_FACE, TEXT_SCALE, colors, TEXT_THICKNESS, cv2.LINE_AA)
          cv2.putText(Img, text[entry], cord_names[entry], TEXT_FACE, TEXT_SCALE, color_names, TEXT_THICKNESS, cv2.LINE_AA)


      rec = cv2.rectangle(Img, (0, 0), (250, 50), color_names, thickness)
      cv2.putText(Img, f"Step n = {i}", (20,30), TEXT_FACE, TEXT_SCALE, colors, TEXT_THICKNESS, cv2.LINE_AA)


      clear_output(wait=True)
      cv2_imshow(Img)
      time.sleep(seconds_per_step)
      initial = matrix @ initial

# Applying this function to the model

# initial distribution
init=np.array([13, 22, 25, 7, 23])/90

# markov matrix
matrix = np.array([[ 5/13,     0,   1/5,   1/7,  2/23],
                    [ 2/13,  7/11,  2/25,     0,     0],
                    [ 4/13,  1/11,   2/5,   1/7,  1/23],
                    [ 1/13,  3/22,     0,     0,     0],
                    [ 1/13,  3/22,  8/25,   5/7, 20/23]])

# this takes arguments as follows:
# matrix: Markov
# init: initial distribution
# the list is the names of the states
# 20: the number of steps to go
# 1: delay time at each step
markov_animator(matrix, init, ["Jeans", "Kids", "Shoes", "Dressing", "Cashier"], 20, 1)